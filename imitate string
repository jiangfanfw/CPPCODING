#include <iostream>
using namespace std;
//字符串函数里一定要注意对于NULL的处理，这是严谨思维的一种体现
class MyString
{
	friend ostream& operator<<(ostream &out, const MyString &s);
public: //构造和析构
	MyString(int len = 0);
	MyString(const char *p);
	MyString(const MyString& obj);
	~MyString();
public: //操作符重载
	MyString& operator=(const char *p);
	MyString& operator=(const MyString& obj);
	char& operator[](int index) const;
public:
	//也要考虑NULL
	bool operator==(const char* p) const; //const修饰防止改变内存的值
	bool operator!=(const char* p) const;
	bool operator==(const MyString& s) const;//修饰this指针
	bool operator!=(const MyString& s) const;
public: //string to c
	const char* c_str() const;
	int length()
	{
		return m_len;
	}
private:
	int m_len;
	char	*m_p = NULL;
};
MyString::MyString(int len)
{
	if (len == 0)
	{
		this->m_len = 0;
		m_p = new char[1];
		strcpy_s(this->m_p, 1, "");
	}
	else
	{
		this->m_len = len;
		//申请内存空间
		this->m_p = new char[this->m_len + 1];
		memset(this->m_p, 0, sizeof(char)*(m_len+1));
	}
	
}
MyString::MyString(const char *p)
{
	//NULL的情况下默认给空字符串
	if (p == NULL)
	{
		this->m_len = 0;
		this->m_p = new char[1];
		strcpy_s(this->m_p,1,"");
	}
	else
	{
		this->m_len = strlen(p);
		//申请内存空间
		this->m_p = new char[this->m_len+1];
		strcpy_s(this->m_p, this->m_len+1, p);
	}
}
MyString::MyString(const MyString& obj)
{
	this->m_len = obj.m_len;
	this->m_p = new char[this->m_len+1];//以0结尾的字符串
	strcpy_s(this->m_p, this->m_len+1, obj.m_p);
}
MyString::~MyString()
{
	if (m_p)
		delete[] m_p;
}
//MyString重载等号操作
MyString& MyString::operator=(const MyString& obj)
{
	//删除旧内存
	if (this->m_p)
		delete[] this->m_p;
	//不用像operator=(const char *p)那样去判断p的NULL
	//因为obj对象前面已经处理过如果是NULL就当空字符串
    //长度至少为0
	this->m_len = obj.m_len;
	this->m_p = new char[this->m_len+1];
	strcpy_s(this->m_p, this->m_len+1, obj.m_p);
	return *this;
}
//重载"="操作
MyString& MyString:: operator=(const char *p)
{
	//删除旧内存
	if (this->m_p)
		delete[] this->m_p;
	if (p == NULL)
	{
		this->m_len = 0;
		this->m_p = new char[1];
		strcpy_s(this->m_p, 1, "");
	}
	else
	{
		this->m_len = strlen(p) ;
		//申请内存空间
		m_p = new char[this->m_len + 1];
		strcpy_s(this->m_p, this->m_len + 1, p);
	}
	return *this;
}
//得到每一个字符的值
//函数调用当左值要返回引用
char& MyString::operator[](int index) const
{
	if (index >= this->m_len)
		return this->m_p[this->m_len - 1];
	return this->m_p[index];
}
//传的p要判断是否是NULL
bool MyString::operator==(const char* p) const
{
	if (p == NULL)
	{
		if (this->m_len == 0)
			return true;
		else
			return false;
	}
	return strcmp(this->m_p, p) == 0 ? true : false;
}
bool MyString::operator==(const MyString& s) const//修饰this指针
{
	return strcmp(this->m_p, s.m_p) == 0 ? true : false;
}
//根据前面的就能判断NULL的问题，这里就不需要判断了
bool MyString::operator!=(const char* p) const
{
	return this->m_p == p ? false : true;
}
bool MyString::operator!=(const MyString& s) const
{
	return this->m_p == s.m_p ? false : true;
}
const char* MyString::c_str() const//修饰this this的内存空间也不能赋值
{
	return this->m_p;
}
ostream& operator<<(ostream &out, const MyString &s)
{
	out << s.m_p << endl;
	return out;
}
void main()
{
	char *p = NULL;
	MyString str(p), strp("jiangfan");
	cout << "str:" << str.c_str() << endl;
	str = strp;
	cout << "str:" << str.c_str() << endl;
	MyString strJ = NULL, strV(5);
	strV = strJ;
	cout << "strV:" << strV.c_str() << endl;
	MyString strA = strp;
	cout << "strA:" << strA.c_str() << endl;
	strA = strp = "abc";
	cout << "strA one more time:" << strA.c_str() << endl;
	MyString strB("def");
	if (strA != strB)
		cout << "string not equal" << endl;
	strB = "";
	cout << "strB:" << strB.c_str() << endl;
	if (strB == NULL)
		cout << "strB == NULL" << endl;
	if (strA == "abc")
		cout << "strA equal" << endl;
	if (strB != "jiangfan")
		cout << "strB != jiangfan" << endl;
	cout << "strA[0]:" << strA[0] << endl;
	strA[2] = 'g';
	cout << "strA[2]:" << strA[2] << endl;
	cout << strA;
	system("pause");
}
